name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      - name: Set environment variables for testing
        run: |
          echo "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}?schema=public" > .env
          echo "NODE_ENV=test" >> .env
          echo "PORT=3333" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET}}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST}}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT}}" >> .env
          echo "SMTP_USER=${{ secrets.SMTP_USER}}" >> .env
          echo "SMTP_PASS=${{ secrets.SMTP_PASS}}" >> .env
          echo "TZ=Asia/Kolkata" >> .env
          
          echo "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}?schema=public" > .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "PORT=3333" >> .env.test
          echo "JWT_SECRET=${{ secrets.JWT_SECRET}}" >> .env.test
          echo "SMTP_HOST=${{ secrets.SMTP_HOST}}" >> .env.test
          echo "SMTP_PORT=${{ secrets.SMTP_PORT}}" >> .env.test
          echo "SMTP_USER=${{ secrets.SMTP_USER}}" >> .env.test
          echo "SMTP_PASS=${{ secrets.SMTP_PASS}}" >> .env.test
          echo "TZ=Asia/Kolkata" >> .env.test

      - name: Install root dependencies
        working-directory: .
        run: npm ci

      - name: Install backend dependencies
        working-directory: apps/backend
        run: npm ci

      - name: Prisma Generate
        working-directory: .
        run: npm run db:generate

      - name: Apply Prisma Schema (Migration Deploy)
        working-directory: .
        run: npx prisma migrate deploy --schema=libs/db/prisma/schema.prisma

      - name: Apply Prisma Schema (ensure tables exist)
        working-directory: .
        run: npx prisma db push --schema=libs/db/prisma/schema.prisma

      - name: Run backend Lint
        working-directory: apps/backend
        run: npm run lint

      - name: Run backend Type Check
        working-directory: apps/backend
        run: npx tsc --noEmit

      - name: Prepare Test Database
        run: |
          npx prisma db push --schema=libs/db/prisma/schema.prisma
          npx prisma migrate reset --force --skip-seed --schema=libs/db/prisma/schema.prisma

      - name: Run backend Tests (Serial)
        working-directory: apps/backend
        run: npm run test:serial
